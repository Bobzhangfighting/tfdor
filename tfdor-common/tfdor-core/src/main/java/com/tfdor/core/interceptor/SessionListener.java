package com.tfdor.core.interceptor;import com.tfdor.core.encrypt.RSAEncrypt;import com.tfdor.domain.RSASecretKey;import com.tfdor.domain.manage.UserInfo;import com.tfdor.enums.LoginState;import com.tfdor.tools.dicts.Dict;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import javax.servlet.http.HttpSession;import javax.servlet.http.HttpSessionAttributeListener;import javax.servlet.http.HttpSessionBindingEvent;import javax.servlet.http.HttpSessionEvent;import javax.servlet.http.HttpSessionListener;import java.util.ArrayList;import java.util.Hashtable;import java.util.List;import java.util.Random;/** * @author chepeiqing * @version V1.0.0 * @Mail chepeiqin@icloud.com * @Date 2017/12/16 * @Time 下午4:35 */public class SessionListener implements HttpSessionListener, HttpSessionAttributeListener {  private static Logger logger = LoggerFactory.getLogger(SessionListener.class);  /** 公私钥对存放缓存 **/  private List<RSASecretKey> secretList = new ArrayList<RSASecretKey>();  /**   * 存放session   **/  private Hashtable<String, HttpSession> sessionTable = new Hashtable<String, HttpSession>();  /**   * 存放sessionID 与 UserId对应关系   **/  private Hashtable<String, String> suId = new Hashtable<String, String>();  /**   * 创建session时触发   *   * @param se   */  @Override  public void sessionCreated(HttpSessionEvent se) {    if (secretList.size() <= 20) {      RSASecretKey secretKey = RSAEncrypt.genKeyPair();      secretList.add(secretKey);    }    int keyPair = new Random().nextInt(secretList.size());    RSASecretKey pair = secretList.get(keyPair);    // 给每个session生成秘钥对    se.getSession().setAttribute(Dict.SECRETKEY, pair);    logger.info("==> [[ Session Size：" + sessionTable.size() + ", SecretList Size: " + secretList.size() + "]]");  }  /**   * 销毁session时触发   *   * @param se   */  @Override  public void sessionDestroyed(HttpSessionEvent se) {    HttpSession session = se.getSession();    if (sessionTable.get(session.getId()) != null) {      if (suId.contains(session.getId())) {        suId.remove(((UserInfo) session.getAttribute(Dict.SESSIONUSERID)).getUserId());        sessionTable.remove(session.getId());      }    }    logger.info("==> [[ Online number：" + sessionTable.size() + " ]]");  }  /**   * 在session中添加对象时触发此操作   *   * @param event   */  @Override  public void attributeAdded(HttpSessionBindingEvent event) {    HttpSession session = event.getSession();    String name = event.getName();    if (Dict.SESSIONUSERID.equals(name)) {//判断是否是放入USER对象      UserInfo user = (UserInfo) event.getValue();      if (user != null) {        if (suId.containsKey(user.getUserId())) {          HttpSession oldSession = sessionTable.get(suId.get(user.getUserId()));          UserInfo oldUser = (UserInfo) oldSession.getAttribute(Dict.SESSIONUSERID);          oldUser.setLoginState(LoginState.L);          sessionTable.remove(oldSession.getId());        }        suId.put(user.getUserId(), session.getId());        if (sessionTable.get(session.getId()) != null) {          sessionTable.remove(session.getId());        }        sessionTable.put(session.getId(), session);      }    }    logger.info("==> [[ Online number：" + sessionTable.size() + " ]]");  }  /**   * 修改、删除session对象时触发此操作   *   * @param event   */  @Override  public void attributeRemoved(HttpSessionBindingEvent event) {  }  /**   * Receives notification that an attribute has been replaced in a   * session.   *   * @param event the HttpSessionBindingEvent containing the session   *              and the name and (old) value of the attribute that was replaced   */  @Override  public void attributeReplaced(HttpSessionBindingEvent event) {  }}